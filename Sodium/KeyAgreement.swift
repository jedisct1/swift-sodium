//
//  KeyAgreement.swift
//  Sodium
//
//  Created by Patrick Salami (https://www.github.com/psalami) on 6/30/17.
//  Copyright Â© 2017 Frank Denis. All rights reserved.
//

import Foundation
import libsodium

public class KeyAgreement {
	
	public typealias PublicKey = Data
	public typealias SecretKey = Data
	public typealias SharedSecret = Data
	public let SecretKeyBytes = Int(crypto_scalarmult_scalarbytes())
	public let PublicKeyBytes = Int(crypto_scalarmult_bytes())
	public let SharedSecretBytes = Int(crypto_scalarmult_bytes())
	
	/**
	Generates an Diffie-Hellman (ECDH) shared secret, such that sharedSecret(aliceSecretKey, bobPublicKey) == sharedSecret(bobSecretKey, alicePublicKey). Fails silently in case of error.
	
	- Parameter secretKey: the value of the secret key of your sending account (typically local)
	- Parameter publicKey: the value of the public key of your receiving account (typically remote)
	- Returns: the ECDH shared secret for the specified public and private keys
	 */
	public func sharedSecret(secretKey: SecretKey, publicKey: PublicKey) -> SharedSecret? {
		if publicKey.count != PublicKeyBytes ||
			secretKey.count != SecretKeyBytes  {
			return nil
		}
		
		var sharedSecret = SharedSecret(count: SharedSecretBytes)
		let result = sharedSecret.withUnsafeMutableBytes { sharedSecretPtr in
			return publicKey.withUnsafeBytes { publicKeyPtr in
				return secretKey.withUnsafeBytes { secretKeyPtr in
					return crypto_scalarmult(sharedSecretPtr, secretKeyPtr, publicKeyPtr)
				}
			}
		}
		
		if result != 0 {
			return nil
		}
		
		return sharedSecret
	}
	
	/**
	Generates a public key from a secret key. Fails silently in case of error.
	
	- Parameter secretKey: the value from which to derive the public key (typically 32 randomly-generated bytes)
	- Returns: a PublicKey (Data) object that contains the Curve25519 public key corresponding to the secret key
	 */
	public func publicKey(secretKey: SecretKey) -> PublicKey? {
		if secretKey.count != SecretKeyBytes {
			return nil
		}
		
		var publicKey = PublicKey(count: PublicKeyBytes)
		let result = publicKey.withUnsafeMutableBytes { publicKeyPtr in
			return secretKey.withUnsafeBytes { secretKeyPtr in
				return crypto_scalarmult_base(publicKeyPtr, secretKeyPtr)
			}
		}
		
		if result != 0 {
			return nil
		}
		
		return publicKey
	}
}
